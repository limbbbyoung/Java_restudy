package day2;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Sample3 {

	public static void main(String[] args) {
		/*
		 * "사람"을 예로 들면 누구든지 "이름" = "홍길동", "생일" = "몇 월 며칠"등으로
		 * 구분할 수 있다. 자바의 맵(Map)은 이러한 대응관계를 쉽게 표현할 수 있게 해주는
		 * 자료형이다. 이것은 요즘 나오는 대부분의 언어들도 갖고 있는 자료형으로 
		 * Associative array, Hash라고도 불린다.
		 * 
		 * 맵(Map)은 사전(dictionary)과 비슷하다. 즉, people이란 단어에 "사람",
		 * baseball이라는 단어에 "야구"라는 뜻이 부합되듯이 Map은 Key와 Value를 
		 * 한 쌍으로 갖는 자료형이다.
		 * key       value
		 * people    사람
		 * baseball  야구
		 * 
		 *  Map은 리스트나 배열처럼 순차적으로(sequential)해당 요소 값을
		 *  구하지 않고 key를 통해 value를 얻는다. 맵(Map)의 가장 큰 특징이라면
		 *  key로 value를 얻어낸다는 점이다. baseball이란 단어의 뜻을 찾기 위해서
		 *  사전의 내용을 순차적으로 모두 검색하는 것이 아니라 baseball이라는
		 *  단어가 있는 곳만을 펼쳐보는 것이다.
		 */
		
		// HashMap
		// Jump to java : 
		// Map 역시 List와 마찬가지로 인터페이스이다. Map 인터페이스를 구현한 
		// Map자료형에는 HashMap, LinkedHashMap, TreeMap등이 있다.
		
		// put
		// key와 value가 String 형태인 HashMap을 만들고 위에서 보았던
		// 예제의 항목값들을 입력해 보자.
		HashMap<String, String> map = new HashMap<>();
		map.put("people", "사람");
		map.put("baseball", "야구");
		// HashMap 역시 제네릭스를 이용한다.

		// get
		// key에 해당되는 value값을 얻기 위해서는 다음과 같이 한다.
		System.out.println(map.get("people"));
		// getOrDefault
		// 맵의 key에 해당하는 value가 없을 경우에 get메소드를 사용하면 
		// 다음처럼 null이 리턴된다.
		System.out.println(map.get("java"));
		// 이때 null 대신 디폴트 값을 얻고 싶은 경우에는 getOrDefault 메소드를 사용
		System.out.println(map.getOrDefault("java", "자바"));
        
		// containsKey
		// containsKey 메소드는 맵(Map)에 해당 키(key)가 있는지를 조사하여 
		// 그 결과값을 리턴한다.
		System.out.println(map.containsKey("people"));
		
		// remove 
		// remove 메소드는 맵(Map)의 항목을 삭제하는 메소드로 key값에 해당되는
		// 아이템(key, value)을 삭제한 후 그 value 값을 리턴한다.
		System.out.println(map.remove("people"));
		// "people"에 해당되는 아이템(people:사람)이 삭제된 후 "사람"이 출력
		
		// size
		// size 메소드는 Map의 갯수를 리턴
		System.out.println(map.size());
		
		// keySet
		// keySet은 맵(Map)의 모든 Key를 모아서 리턴
		System.out.println(map.keySet());
		// KeySet() 메소드는 Map의 모든 Key를 모아서 Set 자료형으로 리턴
		// Set자료형은 다음과 같이 List 자료형으로 바꾸어 사용할수도 있다.
		List<String> keyList = new ArrayList<>(map.keySet());
		
		// LinkedHashMap과 TreeMap
		// Map의 가장 큰 특징은 순서에 의존하지 않고 key로 value를 
		// 가져오는데 있다. 하지만 가끔은 Map에 입력된 순서대로 데이터를 가져오고
		// 싶을 경우도 있고 때로는 입력된 key에 의해 소트된 데이터를 가져오고 
		// 싶을 수도 있을 것이다. 이런경우에는 LinkedHashMap과 TreeMap을
		// 사용하는 것이 유리하다.
		// LinkedHashMap은 입력된 순서대로 데이터를 저장하는 특징을 가지고 있다.
		// TreeMap은 입력된 key의 오름차순 순서로 데이터를 저장하는 특징을 가지고 있다.
	}

}
